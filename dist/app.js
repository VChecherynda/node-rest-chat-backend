"use strict";

const express = require("express");

const bodyParser = require("body-parser");

const app = express();
const port = 8080;

const sequelize = require("./utils/database");

const authRoutes = require("./routes/auth");

const usersRoutes = require("./routes/users");

const conversationsRoutes = require("./routes/conversation");

const messagesRoutes = require("./routes/message");

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: true
}));
app.get("/", (req, res, next) => {
  res.json({
    info: "Node.js, Express, and Postgres API"
  });
});
app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "OPTIONS, GET, POST, PUT, PATCH, DELETE");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization, autorization");
  next();
});
app.use("/", (req, res) => res.send("TEST"));
app.use("/auth", authRoutes);
app.use("/users", usersRoutes);
app.use("/conversations", conversationsRoutes);
app.use("/messages", messagesRoutes);
sequelize.sync().then(result => {
  console.log("App running on port" + " " + port);
  app.listen(port);
}).catch(err => {
  console.log(err);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJib2R5UGFyc2VyIiwiYXBwIiwicG9ydCIsInNlcXVlbGl6ZSIsImF1dGhSb3V0ZXMiLCJ1c2Vyc1JvdXRlcyIsImNvbnZlcnNhdGlvbnNSb3V0ZXMiLCJtZXNzYWdlc1JvdXRlcyIsInVzZSIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJnZXQiLCJyZXEiLCJyZXMiLCJuZXh0IiwiaW5mbyIsInNldEhlYWRlciIsInNlbmQiLCJzeW5jIiwidGhlbiIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJsaXN0ZW4iLCJjYXRjaCIsImVyciJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1DLFVBQVUsR0FBR0QsT0FBTyxDQUFDLGFBQUQsQ0FBMUI7O0FBQ0EsTUFBTUUsR0FBRyxHQUFHSCxPQUFPLEVBQW5CO0FBQ0EsTUFBTUksSUFBSSxHQUFHLElBQWI7O0FBRUEsTUFBTUMsU0FBUyxHQUFHSixPQUFPLENBQUMsa0JBQUQsQ0FBekI7O0FBRUEsTUFBTUssVUFBVSxHQUFHTCxPQUFPLENBQUMsZUFBRCxDQUExQjs7QUFDQSxNQUFNTSxXQUFXLEdBQUdOLE9BQU8sQ0FBQyxnQkFBRCxDQUEzQjs7QUFDQSxNQUFNTyxtQkFBbUIsR0FBR1AsT0FBTyxDQUFDLHVCQUFELENBQW5DOztBQUNBLE1BQU1RLGNBQWMsR0FBR1IsT0FBTyxDQUFDLGtCQUFELENBQTlCOztBQUVBRSxHQUFHLENBQUNPLEdBQUosQ0FBUVIsVUFBVSxDQUFDUyxJQUFYLEVBQVI7QUFDQVIsR0FBRyxDQUFDTyxHQUFKLENBQ0VSLFVBQVUsQ0FBQ1UsVUFBWCxDQUFzQjtBQUNwQkMsRUFBQUEsUUFBUSxFQUFFO0FBRFUsQ0FBdEIsQ0FERjtBQU1BVixHQUFHLENBQUNXLEdBQUosQ0FBUSxHQUFSLEVBQWEsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsS0FBb0I7QUFDL0JELEVBQUFBLEdBQUcsQ0FBQ0wsSUFBSixDQUFTO0FBQUVPLElBQUFBLElBQUksRUFBRTtBQUFSLEdBQVQ7QUFDRCxDQUZEO0FBSUFmLEdBQUcsQ0FBQ08sR0FBSixDQUFRLENBQUNLLEdBQUQsRUFBTUMsR0FBTixFQUFXQyxJQUFYLEtBQW9CO0FBQzFCRCxFQUFBQSxHQUFHLENBQUNHLFNBQUosQ0FBYyw2QkFBZCxFQUE2QyxHQUE3QztBQUNBSCxFQUFBQSxHQUFHLENBQUNHLFNBQUosQ0FDRSw4QkFERixFQUVFLHdDQUZGO0FBSUFILEVBQUFBLEdBQUcsQ0FBQ0csU0FBSixDQUNFLDhCQURGLEVBRUUsMkNBRkY7QUFJQUYsRUFBQUEsSUFBSTtBQUNMLENBWEQ7QUFhQWQsR0FBRyxDQUFDTyxHQUFKLENBQVEsR0FBUixFQUFhLENBQUNLLEdBQUQsRUFBTUMsR0FBTixLQUFjQSxHQUFHLENBQUNJLElBQUosQ0FBUyxNQUFULENBQTNCO0FBQ0FqQixHQUFHLENBQUNPLEdBQUosQ0FBUSxPQUFSLEVBQWlCSixVQUFqQjtBQUNBSCxHQUFHLENBQUNPLEdBQUosQ0FBUSxRQUFSLEVBQWtCSCxXQUFsQjtBQUNBSixHQUFHLENBQUNPLEdBQUosQ0FBUSxnQkFBUixFQUEwQkYsbUJBQTFCO0FBQ0FMLEdBQUcsQ0FBQ08sR0FBSixDQUFRLFdBQVIsRUFBcUJELGNBQXJCO0FBRUFKLFNBQVMsQ0FDTmdCLElBREgsR0FFR0MsSUFGSCxDQUVRQyxNQUFNLElBQUk7QUFDZEMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksd0JBQXdCLEdBQXhCLEdBQThCckIsSUFBMUM7QUFDQUQsRUFBQUEsR0FBRyxDQUFDdUIsTUFBSixDQUFXdEIsSUFBWDtBQUNELENBTEgsRUFNR3VCLEtBTkgsQ0FNU0MsR0FBRyxJQUFJO0FBQ1pKLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxHQUFaO0FBQ0QsQ0FSSCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcbmNvbnN0IGJvZHlQYXJzZXIgPSByZXF1aXJlKFwiYm9keS1wYXJzZXJcIik7XG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBwb3J0ID0gODA4MDtcblxuY29uc3Qgc2VxdWVsaXplID0gcmVxdWlyZShcIi4vdXRpbHMvZGF0YWJhc2VcIik7XG5cbmNvbnN0IGF1dGhSb3V0ZXMgPSByZXF1aXJlKFwiLi9yb3V0ZXMvYXV0aFwiKTtcbmNvbnN0IHVzZXJzUm91dGVzID0gcmVxdWlyZShcIi4vcm91dGVzL3VzZXJzXCIpO1xuY29uc3QgY29udmVyc2F0aW9uc1JvdXRlcyA9IHJlcXVpcmUoXCIuL3JvdXRlcy9jb252ZXJzYXRpb25cIik7XG5jb25zdCBtZXNzYWdlc1JvdXRlcyA9IHJlcXVpcmUoXCIuL3JvdXRlcy9tZXNzYWdlXCIpO1xuXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2UoXG4gIGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7XG4gICAgZXh0ZW5kZWQ6IHRydWVcbiAgfSlcbik7XG5cbmFwcC5nZXQoXCIvXCIsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICByZXMuanNvbih7IGluZm86IFwiTm9kZS5qcywgRXhwcmVzcywgYW5kIFBvc3RncmVzIEFQSVwiIH0pO1xufSk7XG5cbmFwcC51c2UoKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIHJlcy5zZXRIZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiwgXCIqXCIpO1xuICByZXMuc2V0SGVhZGVyKFxuICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1wiLFxuICAgIFwiT1BUSU9OUywgR0VULCBQT1NULCBQVVQsIFBBVENILCBERUxFVEVcIlxuICApO1xuICByZXMuc2V0SGVhZGVyKFxuICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiLFxuICAgIFwiQ29udGVudC1UeXBlLCBBdXRob3JpemF0aW9uLCBhdXRvcml6YXRpb25cIlxuICApO1xuICBuZXh0KCk7XG59KTtcblxuYXBwLnVzZShcIi9cIiwgKHJlcSwgcmVzKSA9PiByZXMuc2VuZChcIlRFU1RcIikpO1xuYXBwLnVzZShcIi9hdXRoXCIsIGF1dGhSb3V0ZXMpO1xuYXBwLnVzZShcIi91c2Vyc1wiLCB1c2Vyc1JvdXRlcyk7XG5hcHAudXNlKFwiL2NvbnZlcnNhdGlvbnNcIiwgY29udmVyc2F0aW9uc1JvdXRlcyk7XG5hcHAudXNlKFwiL21lc3NhZ2VzXCIsIG1lc3NhZ2VzUm91dGVzKTtcblxuc2VxdWVsaXplXG4gIC5zeW5jKClcbiAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIkFwcCBydW5uaW5nIG9uIHBvcnRcIiArIFwiIFwiICsgcG9ydCk7XG4gICAgYXBwLmxpc3Rlbihwb3J0KTtcbiAgfSlcbiAgLmNhdGNoKGVyciA9PiB7XG4gICAgY29uc29sZS5sb2coZXJyKTtcbiAgfSk7XG4iXX0=