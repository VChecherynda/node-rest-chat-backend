"use strict";

const bcrypt = require("bcryptjs");

const jwt = require("jsonwebtoken");

const User = require("../models/user");

exports.postSignin = (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;
  User.findOne({
    where: {
      email: email
    },
    attributes: ["id", "name", "email", "password"]
  }).then(user => {
    const savedUser = user.toJSON();

    if (!savedUser) {
      return res.status(401).json({
        message: "Invalid email or password"
      });
    }

    bcrypt.compare(password, savedUser.password).then(doMatch => {
      if (doMatch) {
        const token = jwt.sign({
          id: savedUser.id,
          email: savedUser.email
        }, "superDuperSecretKey", {
          expiresIn: "1h"
        });
        return res.status(201).json({
          id: savedUser.id,
          token: token
        });
      }

      throw err;
    }).catch(err => {
      return res.status(422).json({
        message: "Invalid email or password"
      });
    });
  }).catch(err => {
    const error = new Error(err);
    error.httpStatusCode = 500;
    return next(error);
  });
};

exports.postSignup = (req, res, next) => {
  const name = req.body.name;
  const email = req.body.email;
  const password = req.body.password;
  bcrypt.hash(password, 12).then(hashedPassword => {
    const user = new User({
      name: name,
      email: email,
      password: hashedPassword
    });
    return user.save();
  }).then(result => {
    res.status(200).json({
      user: result
    });
  }).catch(err => {
    const error = new Error(err);
    error.httpStatusCode = 500;
    return next(error);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVycy9hdXRoLmpzIl0sIm5hbWVzIjpbImJjcnlwdCIsInJlcXVpcmUiLCJqd3QiLCJVc2VyIiwiZXhwb3J0cyIsInBvc3RTaWduaW4iLCJyZXEiLCJyZXMiLCJuZXh0IiwiZW1haWwiLCJib2R5IiwicGFzc3dvcmQiLCJmaW5kT25lIiwid2hlcmUiLCJhdHRyaWJ1dGVzIiwidGhlbiIsInVzZXIiLCJzYXZlZFVzZXIiLCJ0b0pTT04iLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImNvbXBhcmUiLCJkb01hdGNoIiwidG9rZW4iLCJzaWduIiwiaWQiLCJleHBpcmVzSW4iLCJlcnIiLCJjYXRjaCIsImVycm9yIiwiRXJyb3IiLCJodHRwU3RhdHVzQ29kZSIsInBvc3RTaWdudXAiLCJuYW1lIiwiaGFzaCIsImhhc2hlZFBhc3N3b3JkIiwic2F2ZSIsInJlc3VsdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBLE1BQU1DLEdBQUcsR0FBR0QsT0FBTyxDQUFDLGNBQUQsQ0FBbkI7O0FBRUEsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsZ0JBQUQsQ0FBcEI7O0FBRUFHLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxLQUFvQjtBQUN2QyxRQUFNQyxLQUFLLEdBQUdILEdBQUcsQ0FBQ0ksSUFBSixDQUFTRCxLQUF2QjtBQUNBLFFBQU1FLFFBQVEsR0FBR0wsR0FBRyxDQUFDSSxJQUFKLENBQVNDLFFBQTFCO0FBRUFSLEVBQUFBLElBQUksQ0FBQ1MsT0FBTCxDQUFhO0FBQ1hDLElBQUFBLEtBQUssRUFBRTtBQUFFSixNQUFBQSxLQUFLLEVBQUVBO0FBQVQsS0FESTtBQUVYSyxJQUFBQSxVQUFVLEVBQUUsQ0FBQyxJQUFELEVBQU8sTUFBUCxFQUFlLE9BQWYsRUFBd0IsVUFBeEI7QUFGRCxHQUFiLEVBSUdD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ImNvbnN0IGJjcnlwdCA9IHJlcXVpcmUoXCJiY3J5cHRqc1wiKTtcbmNvbnN0IGp3dCA9IHJlcXVpcmUoXCJqc29ud2VidG9rZW5cIik7XG5cbmNvbnN0IFVzZXIgPSByZXF1aXJlKFwiLi4vbW9kZWxzL3VzZXJcIik7XG5cbmV4cG9ydHMucG9zdFNpZ25pbiA9IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBjb25zdCBlbWFpbCA9IHJlcS5ib2R5LmVtYWlsO1xuICBjb25zdCBwYXNzd29yZCA9IHJlcS5ib2R5LnBhc3N3b3JkO1xuXG4gIFVzZXIuZmluZE9uZSh7XG4gICAgd2hlcmU6IHsgZW1haWw6IGVtYWlsIH0sXG4gICAgYXR0cmlidXRlczogW1wiaWRcIiwgXCJuYW1lXCIsIFwiZW1haWxcIiwgXCJwYXNzd29yZFwiXVxuICB9KVxuICAgIC50aGVuKHVzZXIgPT4ge1xuICAgICAgY29uc3Qgc2F2ZWRVc2VyID0gdXNlci50b0pTT04oKTtcblxuICAgICAgaWYgKCFzYXZlZFVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogXCJJbnZhbGlkIGVtYWlsIG9yIHBhc3N3b3JkXCIgfSk7XG4gICAgICB9XG5cbiAgICAgIGJjcnlwdFxuICAgICAgICAuY29tcGFyZShwYXNzd29yZCwgc2F2ZWRVc2VyLnBhc3N3b3JkKVxuICAgICAgICAudGhlbihkb01hdGNoID0+IHtcbiAgICAgICAgICBpZiAoZG9NYXRjaCkge1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSBqd3Quc2lnbihcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiBzYXZlZFVzZXIuaWQsXG4gICAgICAgICAgICAgICAgZW1haWw6IHNhdmVkVXNlci5lbWFpbFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInN1cGVyRHVwZXJTZWNyZXRLZXlcIixcbiAgICAgICAgICAgICAgeyBleHBpcmVzSW46IFwiMWhcIiB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oe1xuICAgICAgICAgICAgICBpZDogc2F2ZWRVc2VyLmlkLFxuICAgICAgICAgICAgICB0b2tlbjogdG9rZW5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDIyKS5qc29uKHsgbWVzc2FnZTogXCJJbnZhbGlkIGVtYWlsIG9yIHBhc3N3b3JkXCIgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihlcnIpO1xuICAgICAgZXJyb3IuaHR0cFN0YXR1c0NvZGUgPSA1MDA7XG4gICAgICByZXR1cm4gbmV4dChlcnJvcik7XG4gICAgfSk7XG59O1xuXG5leHBvcnRzLnBvc3RTaWdudXAgPSAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgY29uc3QgbmFtZSA9IHJlcS5ib2R5Lm5hbWU7XG4gIGNvbnN0IGVtYWlsID0gcmVxLmJvZHkuZW1haWw7XG4gIGNvbnN0IHBhc3N3b3JkID0gcmVxLmJvZHkucGFzc3dvcmQ7XG5cbiAgYmNyeXB0XG4gICAgLmhhc2gocGFzc3dvcmQsIDEyKVxuICAgIC50aGVuKGhhc2hlZFBhc3N3b3JkID0+IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcih7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB1c2VyLnNhdmUoKTtcbiAgICB9KVxuICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IHVzZXI6IHJlc3VsdCB9KTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoZXJyKTtcbiAgICAgIGVycm9yLmh0dHBTdGF0dXNDb2RlID0gNTAwO1xuICAgICAgcmV0dXJuIG5leHQoZXJyb3IpO1xuICAgIH0pO1xufTtcbiJdfQ==